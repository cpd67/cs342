1. Read Chapter 14 (focus primarily on Sections 14.1-2, 14.3.1-3, 14.5-6) — It’s ok to submit rather fuzzy or even empty answers on the material specifically marked for Wednesday’s discussion.

a. Explain the four informal guidelines discussed in Section 14.1.

	+ Guideline 1: design a relation schema so that it is easy to explain its meaning. Don't conflagarate attributes from multiple entity types 
					and relationship types into a single relation. A relation schema should correspond to one entity type or one relationship type.
					If the relation corresponds to a mixture of multiple entities and relationships, its semantics (its meaning resulting 
					from the interpretation of its attribute values in a tuple) may suffer, making it difficult to explain the relation easily. 
	
	+ Guideline 2: design the base relation schemas so that no insertion, deletion, or modification anomalies are present in the relation. 
					(Insertion anomalies are those that occur when you attempt to insert a new record into a table, 
					 deletion anomalies are those that occur when you attempt to delete a records from a table, 
					 modification anomalies are those that occur when you attempt to update a record in a table.)
					 If any of these anomalies are present, note them clearly and make sure that programs that update the database 
					 will operate clearly. 
	
	+ Guideline 3: avoid placing attributes in a base relation whose values may frequently be NULL (as much as possible). If they are unavoidable, 
					make sure that they apply only in exceptional cases and don't apply to a majority of the tuples in the relation.
	
	+ Guideline 4: design relation schemas so that they can be joined with equality conditions on attributes that are appropriately related 
					(primary key, foreign key) pairs in such a way that guarantees that no spurious tuples (those that were not in a table after a 
					 NATURAL JOIN operation and that represent spurious information that is not valid) are generated. Avoid relations that contain 
					 matching attributes that are not (foreign key, primary key) pairs because joining on such attributes may produce spurious tuples.
	
b. Explain the terms functional dependency (for Monday, see Section 14.2) and multi-valued dependency (for Wednesday, see Section 14.6) by giving an example of each and showing how it satisfies the term’s formal definition.
	
	Functional dependency: 
		+ Formal definition: A functional dependency, denoted by X -> Y, between two sets of attributes X and Y that are subsets of R specifies a constraint 
		  on the possible tuples that can form a relation state r of R. The constraint is that, for any two tuples t1 and t2 in r that have t1[X] = t2[X], 
		  they must also have t1[Y] = t2[Y]. 
		  
		  This means that the values of the Y component of a tuple in r depend on, or are determined by, the values of the X component. 
		  Alternatively, the values of the X component of a tuple uniquely (functionally) determine the values of the Y component.
			
		+ Example (taken from the book, pg. 474): 
			
			Extension of relation R(A, B, C, D):
			
			---------------------
			|  A |  B |  C |  D |
			---------------------
			| a1 | b1 | c1 | d1 |
			| a1 | b2 | c2 | d2 | 
			| a2 | b2 | c2 | d3 | 
			| a3 | b3 | c4 | d3 | 
			---------------------
		
			B -> C may hold as an FD because it seems as though the values of C depend on the values of B. 
			Wherever b1 shows up in a tuple of the extension, c1 shows up. Wherever b2 shows up, c2 shows up. 
			Wherever b3 shows up, c4 shows up. Therefore, B -> C may be an FD. 
			
	Multi-valued dependency:
	
		+ Formal definition: A multivalued dependency X ->-> Y specified on relation schema R, where X and Y are both subsets of R, 
							specifies the following constraint on any relation state r of R: If two tuples t1 and t2 exist in r
							such that t1[X] = t2[X], then two tuples t3 and t4 should also exist in r with the following properties, 
							where Z denotes (R - (X U Y)):
							- t3[X] = t4[X] = t1[X] = t2[X]
							- t3[Y] = t1[Y] and t4[Y] = t2[Y]
							- t3[Z] = t2[Z] and t4[Z] = t1[Z]. 
							
		+ Example (from book, pg. 492): 
		
		EMP_PROJECTS
		-----------------
		| ENAME | PNAME |
		----------------- 
		| Smith |   X   |
		| Smith |   Y   |
		-----------------
			
		ENAME ->-> PNAME is there because it is a trivial multivalued dependency. 

c. Review the formal definitions of these terms: superkey; key (see Section 14.3.3).
	
	Superkey: a superkey of a relation schema R = {A1, A2, ... , An} is a set of attributes S which is a set of R with the property that no two tuples t1 and t2 
				in any legal relation state r of R will have t1[S] = t2[S]. 
	
	Key: a key K is a superkey with the additional property that removal of any attribute from K will cause K not to be a superkey anymore. 
			The difference between a key and a superkey is that a key has to be minimal, meaning: if we have a key K = {A1, A2, ... , Ak}
			of R, then K - {Ai} is not a key of R for any Ai, 1 <= i <= k. 

d. Explain BCNF (for Monday, see Section 14.5) and 4NF (for Wednesday, see Section 14.6) by giving an example relation and proving whether its schema conforms (or fails to conform) to the definitions of each normal form.
	
	+ BCNF:
		+ Formal definition: A relation schema R is in BCNF (Boyce-Codd Normal Form) if, whenever a nontrivial functional dependency X -> A 
							holds in R, then X is a superkey of R. 
							
		+ Example (taken from the book, pg. 488): 
		
			R(A, B, C)
		
			F.D. 1: {A, B} -> C
			F.D. 2: C -> B
			
			In the example, this relation is NOT in BCNF because of the functional dependency C -> B.
			The reason is because C is not a superkey but B is a prime attribute, which fails to conform to
			the formal definition of BCNF (which disallows prime attributes).
	
	+ 4NF:
		+ Formal definition: a relation schema R is in 4NF with respect to a set of dependencies F (that includes functional 
								dependencies and multivalued dependencies) if, for every nontrivial multivalued dependency 
								X ->-> Y in F+, X is a superkey for R.
								
		+ Example (from book, pg. 492):
			EMP
			-------------------------
			| ENAME | PNAME | DNAME |
			-------------------------
			| Smith |   X   |  John |  
			| Smith |   Y   |  Anna |
			| Smith |   X   |  Anna | 
			| Smith |   Y   |  John | 
			-------------------------

			EMP is not in 4NF because in the nontrivial multivalued dependencies ENAME ->-> PNAME and ENAME ->-> DNAME, 
			and ENAME is not a superkey of EMP. 
			

e. Explain when one would one want to normalize a relational schema and when one might want to de-normalize one.

	Normalize: when you want to assure the quality of a database design, or of a legacy design that was obtained from a previous company. 
				This ensures that the designs are sustainable over long periods of time (should you want that to occur).
				Also, to minimize redundance and to minimize insertion, deletion and modification anomalies in your database design
				so that your design is of a higher quality.
	
	De-normalize: when performance becomes an issue and when corresponding penalties of dealing with anomalies at 
					lower forms can be incurred. (It's a trade-off between quality and performance; lower quality designs 
					might have increased performance, but there will be anomalies associated with them). 

2. Review Section 15.1.1 well enough to be able to define Armstrong’s axioms (IR1–3) and closures.

	Armstrong’s axioms: inference rules (which infer new dependencies from a given set of dependencies) for functional dependencies.
						
						They are: 
						IR1 (reflexive rule): If X is a superset of Y, then X -> Y. 
						IR2 (augmentation rule): {X -> Y} |=XZ -> YZ.
						IR3 (transitive rule): {X -> Y, Y-> Z} |=X -> Z.
	
	Closures: the set of all dependencies that include a set of functional dependencies that are specified on a relation schema 
				as well as dependencies that can be inferred from the set of functional dependencies is called the closure of that 
				set of functional dependencies. 